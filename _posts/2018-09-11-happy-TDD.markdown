---
layout: post
title:  "Happy Tdd"
date:   2018-09-11 00:15:18 +0800
categories: tdd,test 
header-img: img/post-bg-universe.jpg
tag: tdd, test 
---
## 你能学到什么
1. 唯一正确的编码套路 
2. 务实的TDD需要自动化测试
3. Junit和mockito
4. 值得一试的测试框架spock 

## 背景
如果有一样编程套路可以让我推荐，我会说TDD + kata练习[下一篇博客会讲解]
程序员应不应该写测试，当然和其他事情一样，有人反对就有人同意。
反对的一方: 代码都写不完了，还怎么测试
同意的乙方: 假定代码都是烂代码，而且都是要留给别人或者以后的自己的写的
对于我来说，基本的原则是这样，写好单元测试是必要的，必要的时候可以添加一些集成测试
1.业务过于简单，只是curd，需要写测试吗？
2.业务过于复杂，写都写不完，还需要写测试吗？
首先推荐一本书，修改代码的艺术
一个普通程序员的日常：遇到bug，点击运行或者debug，完整走一遍,查看代码的流程，从头到尾定位问题。如果是上正式环境或者是生产环境
心里可能还会求神拜佛，保佑有没有问题。
如果还是使用这种方法，那么可以尝试一下TDD，有时候选择太多也不是好事，因此我说，唯一正确，那么起码还会有人去尝试，毕竟没得选了
TDD的好处
写tdd最大的好处之一就是能够让你非常简单的重构，重构的基础就是测试，而重构是程序员最常用最实用的技能之一。
TDD的实践
1.测试先行，也就是说，写代码之前先写测试代码，更简单的说，写代码之前，先想好，要做成什么样，要有什么方法，要返回怎么样的数据结构,再写实现代码，
这样能让你对全局有一个大致地了解，也更加符合迭代的要求
2.什么样的代码应该测试，什么样的代码不需要测试


## 正文
例子 不需要测试的代码

例子 junit @rule junit嵌套测试

例子 junit mock 
# 总结
有很多想分享的，但是别人已经很详细了，倒不如给一个概念，然后谷歌一下方便快捷得多  
写文章真的是比我想象中耗费时间呀，当作草稿慢慢写好了。。。

[下一篇博客会讲解]: https://www.jianshu.com/p/e68fba58f75c

